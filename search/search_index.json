{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"WELCOME! THE ALL IN ONE DOCUMENTATION! TO THE POINT ONLY!","title":"Home"},{"location":"#welcome","text":"","title":"WELCOME!"},{"location":"#the-all-in-one-documentation","text":"","title":"THE ALL IN ONE DOCUMENTATION!"},{"location":"#to-the-point-only","text":"","title":"TO THE POINT ONLY!"},{"location":"django/django_admin/","text":"ADMIN To create the admin- 1 python manage.py createsuperuser To connect models to django admin- 1 app>admin.py>register model To see a model in our admin panel we have to register it first. In admins.py- 1 2 3 4 5 from django.contrib import admin from cars.models import Car # Register your models here. admin . site . register ( Car )","title":"Admin"},{"location":"django/django_admin/#admin","text":"To create the admin- 1 python manage.py createsuperuser To connect models to django admin- 1 app>admin.py>register model To see a model in our admin panel we have to register it first. In admins.py- 1 2 3 4 5 from django.contrib import admin from cars.models import Car # Register your models here. admin . site . register ( Car )","title":"ADMIN"},{"location":"django/django_apps/","text":"APPS To register an app, this is done after adding the ulrs in project level url patterns. Copy the app class name > settings.py > installed app list > appname.apps.classname Example- 1 'cars.apps.CarsConfig' After this- 1 python manage.py makemigrations appname","title":"Apps"},{"location":"django/django_apps/#apps","text":"To register an app, this is done after adding the ulrs in project level url patterns. Copy the app class name > settings.py > installed app list > appname.apps.classname Example- 1 'cars.apps.CarsConfig' After this- 1 python manage.py makemigrations appname","title":"APPS"},{"location":"django/django_basics/","text":"DJANGO BASICS To start a Django Project- 1 django-admin startproject sitename To run the Django Server- 1 python manage.py runserver To make an app in Django- 1 python manage.py startapp app_name","title":"Django Basics"},{"location":"django/django_basics/#django-basics","text":"To start a Django Project- 1 django-admin startproject sitename To run the Django Server- 1 python manage.py runserver To make an app in Django- 1 python manage.py startapp app_name","title":"DJANGO BASICS"},{"location":"django/django_checklist/","text":"PATHS AND CHECKLISTS Site App Project level template base.html App level template App name html files Make simple views in the app Connect to urls.py in project level,url pattern Register app in app section in settings Add path in DIR for project level template Make models Make migrations Migrate Create forms.py Adjust the model with forms.py ModelClass Connect it with views Add to html template","title":"Paths & Checklists"},{"location":"django/django_checklist/#paths-and-checklists","text":"Site App Project level template base.html App level template App name html files Make simple views in the app Connect to urls.py in project level,url pattern Register app in app section in settings Add path in DIR for project level template Make models Make migrations Migrate Create forms.py Adjust the model with forms.py ModelClass Connect it with views Add to html template","title":"PATHS AND CHECKLISTS"},{"location":"django/django_forms/","text":"FORMS This thing is needed in all django forms- 1 2 3 4 5 < form action = \"\" method = \"post\" > {% csrf_token %} {{form}} < input type = \"submit\" value = \"\" /> </ form > Final form example- 1 2 3 4 5 6 7 8 9 10 11 12 13 14 <!-- .errors shows the validator errors --> < div class = \"container\" > < form action = \"\" method = \"post\" > {% csrf_token %} {% for field in form %} < div class = \"mb-3\" > {{field.label_tag}} </ div > {{field}} {{field.errors}} {% endfor %} < input type = \"submit\" /> </ form > </ div > Create forms in html like the one above>create forms.py in the app>create the form classes>import it in views>add it to view classes Example from views.py- 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 < ! -- redirect and reverse needed for redirecting --> from django.shortcuts import render , redirect from django.urls import reverse from .forms import ReviewForm #a class from view.py for forms def rentalreview ( request ): if request . method == 'POST' : form = ReviewForm ( request . POST ) if form . is_valid (): print ( form . cleaned_data ) #it gives a python dictonary return redirect ( reverse ( 'cars:thankyou' )) else : form = ReviewForm () return render ( request , 'cars/rentalreview.html' , context = { 'form' : form }) Example from forms.py- 1 2 3 4 5 6 7 8 9 from django import forms class ReviewForm ( forms . Form ): first_name = forms . CharField ( label = 'First Name' , max_length = 100 ) last_name = forms . CharField ( label = 'Last Name' , max_length = 100 ) email = forms . EmailField ( label = 'Email' ) review = forms . CharField ( label = 'Please write your review!' , widget = forms . Textarea ( attrs = { 'class' : 'myform' })) #atrs is used to design the widget In the .html tags- Also can use things like as_table,as_ul,etc- 1 {{ form . as_p }} #wraps the form label around a paragraph tag Just to get first name label and field not entire form- 1 {{ form . first_name . label_tag }} {{ form . first_name }}","title":"Forms"},{"location":"django/django_forms/#forms","text":"This thing is needed in all django forms- 1 2 3 4 5 < form action = \"\" method = \"post\" > {% csrf_token %} {{form}} < input type = \"submit\" value = \"\" /> </ form > Final form example- 1 2 3 4 5 6 7 8 9 10 11 12 13 14 <!-- .errors shows the validator errors --> < div class = \"container\" > < form action = \"\" method = \"post\" > {% csrf_token %} {% for field in form %} < div class = \"mb-3\" > {{field.label_tag}} </ div > {{field}} {{field.errors}} {% endfor %} < input type = \"submit\" /> </ form > </ div > Create forms in html like the one above>create forms.py in the app>create the form classes>import it in views>add it to view classes Example from views.py- 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 < ! -- redirect and reverse needed for redirecting --> from django.shortcuts import render , redirect from django.urls import reverse from .forms import ReviewForm #a class from view.py for forms def rentalreview ( request ): if request . method == 'POST' : form = ReviewForm ( request . POST ) if form . is_valid (): print ( form . cleaned_data ) #it gives a python dictonary return redirect ( reverse ( 'cars:thankyou' )) else : form = ReviewForm () return render ( request , 'cars/rentalreview.html' , context = { 'form' : form }) Example from forms.py- 1 2 3 4 5 6 7 8 9 from django import forms class ReviewForm ( forms . Form ): first_name = forms . CharField ( label = 'First Name' , max_length = 100 ) last_name = forms . CharField ( label = 'Last Name' , max_length = 100 ) email = forms . EmailField ( label = 'Email' ) review = forms . CharField ( label = 'Please write your review!' , widget = forms . Textarea ( attrs = { 'class' : 'myform' })) #atrs is used to design the widget","title":"FORMS"},{"location":"django/django_forms/#in-the-html-tags-","text":"Also can use things like as_table,as_ul,etc- 1 {{ form . as_p }} #wraps the form label around a paragraph tag Just to get first name label and field not entire form- 1 {{ form . first_name . label_tag }} {{ form . first_name }}","title":"In the .html tags-"},{"location":"django/django_forms_with_models/","text":"FORMS WITH MODELS ModelClass Make a model in models.py then register it in admin.py then make migrations>migrate Example of the model- 1 2 3 4 5 6 7 8 9 from django.db import models from django.core.validators import MinValueValidator , MaxValueValidator # Create your models here. class Review ( models . Model ): first_name = models . CharField ( max_length = 30 ) last_name = models . CharField ( max_length = 30 ) stars = models . IntegerField ( validators = [ MinValueValidator ( 1 ), MaxValueValidator ( 5 )]) Then in forms.py- 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 from django import forms from . models import Review from django.forms import ModelForm class ReviewForm ( ModelForm ): class Meta : model = Review # we can choose which to keep in fields or we can use '__all__' to give everything fields = [ 'first_name' , 'last_name' , 'stars' ] #if we want to change default labels labels = { 'first_name' : 'Your First Name' , 'last_name' : 'Your Last Name' , 'stars' : 'Rating' } #if we want to change default error message error_messages = { 'stars' : { 'min_value' : 'Min Rating is 1!' , 'max_value' : 'Max Rating is 5!' , } } In views.py- 1 2 3 4 5 6 7 8 9 10 from django.shortcuts import render , redirect from django.urls import reverse from .forms import ReviewForm # Create your views here. def rentalreview ( request ): if request . method == 'POST' : form = ReviewForm ( request . POST ) if form . is_valid (): form . save () Final Form- 1 2 3 4 5 6 7 8 9 10 11 12 13 14 <!-- .errors shows the validator errors --> < div class = \"container\" > < form action = \"\" method = \"post\" > {% csrf_token %} {% for field in form %} < div class = \"mb-3\" > {{field.label_tag}} </ div > {{field}} {{field.errors}} {% endfor %} < input type = \"submit\" /> </ form > </ div >","title":"Forms With Models"},{"location":"django/django_forms_with_models/#forms-with-models","text":"","title":"FORMS WITH MODELS"},{"location":"django/django_forms_with_models/#modelclass","text":"Make a model in models.py then register it in admin.py then make migrations>migrate Example of the model- 1 2 3 4 5 6 7 8 9 from django.db import models from django.core.validators import MinValueValidator , MaxValueValidator # Create your models here. class Review ( models . Model ): first_name = models . CharField ( max_length = 30 ) last_name = models . CharField ( max_length = 30 ) stars = models . IntegerField ( validators = [ MinValueValidator ( 1 ), MaxValueValidator ( 5 )]) Then in forms.py- 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 from django import forms from . models import Review from django.forms import ModelForm class ReviewForm ( ModelForm ): class Meta : model = Review # we can choose which to keep in fields or we can use '__all__' to give everything fields = [ 'first_name' , 'last_name' , 'stars' ] #if we want to change default labels labels = { 'first_name' : 'Your First Name' , 'last_name' : 'Your Last Name' , 'stars' : 'Rating' } #if we want to change default error message error_messages = { 'stars' : { 'min_value' : 'Min Rating is 1!' , 'max_value' : 'Max Rating is 5!' , } } In views.py- 1 2 3 4 5 6 7 8 9 10 from django.shortcuts import render , redirect from django.urls import reverse from .forms import ReviewForm # Create your views here. def rentalreview ( request ): if request . method == 'POST' : form = ReviewForm ( request . POST ) if form . is_valid (): form . save () Final Form- 1 2 3 4 5 6 7 8 9 10 11 12 13 14 <!-- .errors shows the validator errors --> < div class = \"container\" > < form action = \"\" method = \"post\" > {% csrf_token %} {% for field in form %} < div class = \"mb-3\" > {{field.label_tag}} </ div > {{field}} {{field.errors}} {% endfor %} < input type = \"submit\" /> </ form > </ div >","title":"ModelClass"},{"location":"django/django_models/","text":"MODELS Creates set of instruction but doesn't apply (1) 1 python manage.py makemigrations name Runs the migrations (2) 1 python manage.py migrate To see SQL code that's running 1 python manage.py sqlmigrate appname 0001 Any time a model is made or any changes is made repeat (1) & (2) Create 1 from office.models import Patients 1 2 3 Patients . objects . create ( first_name = 'susan' , last_name = 'smith' , age = 40 ) mylist = [ Patients ( first_name = 'midfmi' , last_name = 'smixth' , age = 50 ), Patient ( first_name = 'mimxi' , last_name = 'smitah' , age = 30 )] Patients . objects . bulk_create ( mylist ) Read 1 2 3 4 5 Patients . objects . all () Patients . objects . all ()[ 0 ] Patients . objects . get ( pk = 1 ) #pk=primary key and SQL index start at 1 Patients . objects . filter ( last_name = 'smith' ) Patients . objects . filter ( last_name = 'smith' ) . filter ( age = 40 ) 1 2 from django.db.models import Q #for conditional operators Patients . objects . filter ( Q ( last_name = 'smith' ) & Q ( age = 40 )) Field lookup 1 2 3 Patients . objects . filter ( last_name__startswith = 's' ) Patients . objects . filter ( age__in = [ 20 , 30 , 50 ]) Patients . objects . filter ( age__gte = 39 ) #gte=greater than or equal to Update 1 2 3 carl = Patients . objects . get ( pk = 1 ) carl = Patients . objects . get ( pk = 1 ) carl . save () To validate data in a model- 1 2 3 from django.core.validators import MaxValueValidator , MinValueValidator #can be of more types heart_rate = models . IntegerField ( default = 60 , validators = [ MinValueValidator ( 1 ), MaxValueValidator ( 300 )]) Delete 1 2 data = Patients . objects . get ( pk = 1 ) data . delete ()","title":"Models"},{"location":"django/django_models/#models","text":"Creates set of instruction but doesn't apply (1) 1 python manage.py makemigrations name Runs the migrations (2) 1 python manage.py migrate To see SQL code that's running 1 python manage.py sqlmigrate appname 0001 Any time a model is made or any changes is made repeat (1) & (2)","title":"MODELS"},{"location":"django/django_models/#create","text":"1 from office.models import Patients 1 2 3 Patients . objects . create ( first_name = 'susan' , last_name = 'smith' , age = 40 ) mylist = [ Patients ( first_name = 'midfmi' , last_name = 'smixth' , age = 50 ), Patient ( first_name = 'mimxi' , last_name = 'smitah' , age = 30 )] Patients . objects . bulk_create ( mylist )","title":"Create"},{"location":"django/django_models/#read","text":"1 2 3 4 5 Patients . objects . all () Patients . objects . all ()[ 0 ] Patients . objects . get ( pk = 1 ) #pk=primary key and SQL index start at 1 Patients . objects . filter ( last_name = 'smith' ) Patients . objects . filter ( last_name = 'smith' ) . filter ( age = 40 ) 1 2 from django.db.models import Q #for conditional operators Patients . objects . filter ( Q ( last_name = 'smith' ) & Q ( age = 40 )) Field lookup 1 2 3 Patients . objects . filter ( last_name__startswith = 's' ) Patients . objects . filter ( age__in = [ 20 , 30 , 50 ]) Patients . objects . filter ( age__gte = 39 ) #gte=greater than or equal to","title":"Read"},{"location":"django/django_models/#update","text":"1 2 3 carl = Patients . objects . get ( pk = 1 ) carl = Patients . objects . get ( pk = 1 ) carl . save () To validate data in a model- 1 2 3 from django.core.validators import MaxValueValidator , MinValueValidator #can be of more types heart_rate = models . IntegerField ( default = 60 , validators = [ MinValueValidator ( 1 ), MaxValueValidator ( 300 )])","title":"Update"},{"location":"django/django_models/#delete","text":"1 2 data = Patients . objects . get ( pk = 1 ) data . delete ()","title":"Delete"},{"location":"django/django_static/","text":"STATIC FILES Directory- 1 app/static/appname/files After static is set migrate needs to be done In html beginning- 1 { % load static % } Then- 1 < link rel = \"stylesheet\" href = \" {% static 'cars/custom.css' %} \" />","title":"Static Files"},{"location":"django/django_static/#static-files","text":"Directory- 1 app/static/appname/files After static is set migrate needs to be done In html beginning- 1 { % load static % } Then- 1 < link rel = \"stylesheet\" href = \" {% static 'cars/custom.css' %} \" />","title":"STATIC FILES"},{"location":"django/django_templates/","text":"TEMPLATES In app level always make a folder with sub-directories as templates / appname / .html files Then we need to import os- 1 import os For project level templates, in settings for templates add that to DIR=[] to find templates- 1 DIR = [ os . path . join ( BASE_DIR , 'templates/' )] In the template html file we index a list by using . so list_name.0 - 1 < h2 > Her first name was {{first_name.1}} </ h2 > To write a comment- 1 < h2 > {# this is a comment #} </ h2 > <!-- better to use html comment --> To add filter we add | - 1 < h2 > Her first name was {{first_name | upper}} and last name was {{last_name}} </ h2 > To get a URL app_name = 'my_app' , register this in urls.py then name your URLs In anchor tags- 1 { % url 'my_app:variable' % } BLOCKS For base.html we generally set blocks anything above block content is header and below is footer (common for all html files, when it's extended to other html templates.). 1 2 { % block content % } { % endblock % } An Example- 1 2 3 4 5 6 7 8 9 10 11 <!DOCTYPE html> < html lang = \"en\" > < head > < title > Document </ title > </ head > < body > < --Static same content for all pages above block here -- > {% block content %} {% endblock %} </ body > </ html > Extend it to get in other html files- 1 2 3 4 5 6 7 8 { % extends 'base.html' % } { % block content % } '''inside here will be all the actual html contents contents, but we dont have to add typical html layout as we have already done it in base.html''' { % endblock % }","title":"Templates"},{"location":"django/django_templates/#templates","text":"In app level always make a folder with sub-directories as templates / appname / .html files Then we need to import os- 1 import os For project level templates, in settings for templates add that to DIR=[] to find templates- 1 DIR = [ os . path . join ( BASE_DIR , 'templates/' )] In the template html file we index a list by using . so list_name.0 - 1 < h2 > Her first name was {{first_name.1}} </ h2 > To write a comment- 1 < h2 > {# this is a comment #} </ h2 > <!-- better to use html comment --> To add filter we add | - 1 < h2 > Her first name was {{first_name | upper}} and last name was {{last_name}} </ h2 > To get a URL app_name = 'my_app' , register this in urls.py then name your URLs In anchor tags- 1 { % url 'my_app:variable' % }","title":"TEMPLATES"},{"location":"django/django_templates/#blocks","text":"For base.html we generally set blocks anything above block content is header and below is footer (common for all html files, when it's extended to other html templates.). 1 2 { % block content % } { % endblock % } An Example- 1 2 3 4 5 6 7 8 9 10 11 <!DOCTYPE html> < html lang = \"en\" > < head > < title > Document </ title > </ head > < body > < --Static same content for all pages above block here -- > {% block content %} {% endblock %} </ body > </ html > Extend it to get in other html files- 1 2 3 4 5 6 7 8 { % extends 'base.html' % } { % block content % } '''inside here will be all the actual html contents contents, but we dont have to add typical html layout as we have already done it in base.html''' { % endblock % }","title":"BLOCKS"},{"location":"django/django_urls/","text":"DJANGO URLS To start of we make urls.py in the app we created. Then we import this 2 lines of code- 1 2 from django.urls import path from . import views We then give it a name generally same as the app we created- 1 app_name = 'appname' In app level we first do the imports then add the patterns- 1 2 3 4 5 6 7 8 from django.urls import path from . import views #Here views.list_patients is the class name in Views urlpatterns = [ path ( '' , views . list_patients , name = 'list_patients' ), ] 'include' is added to get the urls from app. One 'include' for all the urls. In the project level urls we do the imports then include the urls from the apps. An Example- 1 2 3 4 5 6 7 from django.contrib import admin from django.urls import path , include urlpatterns = [ path ( 'admin/' , admin . site . urls ), path ( 'my_app/' , include ( 'my_app.urls' )), ]","title":"Urls"},{"location":"django/django_urls/#django-urls","text":"To start of we make urls.py in the app we created. Then we import this 2 lines of code- 1 2 from django.urls import path from . import views We then give it a name generally same as the app we created- 1 app_name = 'appname' In app level we first do the imports then add the patterns- 1 2 3 4 5 6 7 8 from django.urls import path from . import views #Here views.list_patients is the class name in Views urlpatterns = [ path ( '' , views . list_patients , name = 'list_patients' ), ] 'include' is added to get the urls from app. One 'include' for all the urls. In the project level urls we do the imports then include the urls from the apps. An Example- 1 2 3 4 5 6 7 from django.contrib import admin from django.urls import path , include urlpatterns = [ path ( 'admin/' , admin . site . urls ), path ( 'my_app/' , include ( 'my_app.urls' )), ]","title":"DJANGO URLS"},{"location":"django/django_views/","text":"VIEWS There are 2 types of Views- Function Based Class Based Function Based Some Examples- 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 from django.shortcuts import render from . import models # Create your views here. def list_patients ( requests ): all_patients = models . Patients . object . all () #all variables we need to show must be in dict context_list = { 'patients' : all_patients } #context passes out the variables to html files return render ( requests , 'office/list.html' , context = context_list ) def list ( request ): all_cars = models . Car . objects . all () context = { 'all_cars' : all_cars } return render ( request , 'cars/list.html' , context = context ) def add ( request ): if request . POST : brand = request . POST [ 'brand' ] year = int ( request . POST [ 'year' ]) models . Car . objects . create ( brand = brand , year = year ) # if user submitted new car go back to list view return redirect ( reverse ( 'cars:list' )) return render ( request , 'cars/add.html' ) def delete ( request ): if request . POST : # delete car pk = request . POST [ 'pk' ] try : models . Car . objects . get ( pk = pk ) . delete () return redirect ( reverse ( 'cars:list' )) except : print ( 'Car Not Found!' ) return redirect ( reverse ( 'cars:list' )) return render ( request , 'cars/delete.html' ) Class Based","title":"Views"},{"location":"django/django_views/#views","text":"There are 2 types of Views- Function Based Class Based","title":"VIEWS"},{"location":"django/django_views/#function-based","text":"Some Examples- 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 from django.shortcuts import render from . import models # Create your views here. def list_patients ( requests ): all_patients = models . Patients . object . all () #all variables we need to show must be in dict context_list = { 'patients' : all_patients } #context passes out the variables to html files return render ( requests , 'office/list.html' , context = context_list ) def list ( request ): all_cars = models . Car . objects . all () context = { 'all_cars' : all_cars } return render ( request , 'cars/list.html' , context = context ) def add ( request ): if request . POST : brand = request . POST [ 'brand' ] year = int ( request . POST [ 'year' ]) models . Car . objects . create ( brand = brand , year = year ) # if user submitted new car go back to list view return redirect ( reverse ( 'cars:list' )) return render ( request , 'cars/add.html' ) def delete ( request ): if request . POST : # delete car pk = request . POST [ 'pk' ] try : models . Car . objects . get ( pk = pk ) . delete () return redirect ( reverse ( 'cars:list' )) except : print ( 'Car Not Found!' ) return redirect ( reverse ( 'cars:list' )) return render ( request , 'cars/delete.html' )","title":"Function Based"},{"location":"django/django_views/#class-based","text":"","title":"Class Based"},{"location":"job_requirments/overview/","text":"Typical Requirments Django. React/Vue/Angular for front-end development. Relational (i.e. MySQL, PostgreSQL) and Non-Relational (i.e. MongoDB) database. Containerization & Orchestration tools (i.e. Docker, Kubernetes). Cloud Services (i.e. AWS / Azure).","title":"Typical Requirments"},{"location":"job_requirments/overview/#typical-requirments","text":"Django. React/Vue/Angular for front-end development. Relational (i.e. MySQL, PostgreSQL) and Non-Relational (i.e. MongoDB) database. Containerization & Orchestration tools (i.e. Docker, Kubernetes). Cloud Services (i.e. AWS / Azure).","title":"Typical Requirments"}]}